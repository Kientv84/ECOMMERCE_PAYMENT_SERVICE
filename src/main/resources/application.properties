spring.application.name=kientv84
server.port=8083

# Config datasource postgre sql
spring.datasource.url=jdbc:postgresql://localhost:15800/demo?currentSchema=payment_service
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver


#Hibernate/ JPA config (Hibernate se tu dong tao hoac update table de chung ta xem theo entity)   # tat spring.jpa.hibernate.ddl-auto=update  khi database on dinh va su dung flyway
spring.jpa.hibernate.ddl-auto=update  

#Cho phep hien thi cau SQL khi start.
spring.jpa.show-sql=true 

#format lai cau len sql
spring.jpa.properties.hibernate.format_sql=true

#config cho jpa hieu viet in hoa
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

#flyway config
#spring.flyway.baseline-on-migrate=true
spring.flyway.enabled=false
#spring.flyway.locations=classpath:/db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.validate-on-migrate=true

#--- logging
# -- log root
logging.level.root=INFO

# JWT config
jwt.secret=my-super-secret-jwt-key-123456789012345
jwt.expiration=3600000 
jwt.issuer=KienTV-System

#Devetools
spring.devtools.restart.enabled=true


#kafa group
spring.kafka.order.group=order-group

#kafa config
spring.kafka.bootstrap-servers=localhost:29092

#config producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# config consumer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.auto-offset-reset=earliest

#security, cho phep deserialize
spring.kafka.consumer.properties.spring.json.trusted.packages=*


#Kafka topic (<domain>.<entity>.<event-type>)
spring.kafka.order.topic.created-order=com.order.created_order
spring.kafka.order.topic.payment-checked=order.payment-checked

# --- Openfeign
openfeign.productClient.name=productClient
openfeign.productClient.url.get-product=/v1/api/item/{productId}
openfeign.content-type=application/json
spring.cloud.productClient.client.config.productClient.url=http://localhost:8080
